#!/bin/bash
# Test script for a master run (copy files, run sw/update fw on pis, run daq)



#################### STARTUP ####################
# Argument processing
if [ "$#" -eq 3 ] # Make sure there are zero or two arguments
then
    RUN_NUMBER=$1
    MAXEVENTS=$2
    PED=$3
elif [ "$#" -eq 0 ]
then
    RUN_NUMBER=0
    MAXEVENTS=1000
    PED=0
else
    echo "Usage: ./test_master_run [RUN NUMBER] [EVENTS] [PED]"
    exit
fi

if [ $PED -eq 1 ]
then
    echo "Pedestal not currently supported"
    exit
fi

# Check directory
REPODIR="$PWD"                  # Get current working directory
if [ ! -d "$REPODIR/.git/" ]    # Make sure it's the highest directory in the repo
then
    echo "You are not in the right directory. This script must be executed from"\
        "the main directory of the repository."
    exit
fi



#################### VARIABLES ####################
# Directories
DAQDIR="$REPODIR/daq"                       	# Folder containing DAQ software
RDOUTDIR="$REPODIR/rdout"                   	# Folder containing software for RDOUT Pis
SYNCDIR="$REPODIR/sync"                     	# Folder containing software for SYNC Pis
COMMONDIR="$REPODIR/common"                     # Folder containing software common to RDOUT and SYNC Pis
DATADIR="$REPODIR/data"                     	# Folder for the data files
REMOTE_RDOUTDIR="~/rdout"                   	# Folder on Pi to contain RDOUT software
REMOTE_SYNCDIR="~/sync"                     	# Folder on Pi to contain SYNC software

# Files
DAQEXE="$DAQDIR/bin/main"                   	# DAQ executable
RDOUT_IP_FILE="$REPODIR/etc/rdout_ips.txt"  	# File containing IP's for the readout Pis
SYNC_IP_FILE="$REPODIR/etc/sync_ips.txt"    	# File containing IP's for the syncboard Pis
REMOTE_RDOUT_EXE="run_rdout"                	# File to be executed on rdout Pis
REMOTE_SYNC_EXE="run_sync"                  	# File to be executed on sync Pis
ENDRDOUT="$REMOTE_RDOUTDIR/stop.run.please" 	# When created, this file stops the helper process on the rdout Pis
ENDSYNC="$REMOTE_SYNCDIR/stop.run.please"   	# When created, this file stops the helper process on the sync Pis

# Arrays
RDOUT_IPS=($(cat $RDOUT_IP_FILE))           	# Read rdout IPs into an array
SYNC_IPS=($(cat $SYNC_IP_FILE))             	# Read sync IPs into an array

# Other
REMOTE_USR="pi"                                 # User on the raspberry Pis
RSYNC_FLAGS="-az --delete"                      # Flags used with rsync (archive/recursive, compress, delete removed files)
RDOUT_ARGS="$PED"                               # Arguments fed to the readout script (excluding IPBus IP and MAC addresses)
SYNC_ARGS="$PED"                                # Arguments fed to the sync script
DAQ_ARGS="$RUN_NUMBER $MAXEVENTS $PED $DATADIR" # Arguments fed to the DAQ
RPI_PREFIX="192.168.222."                       # Prefix for the Pis' IP addresses
IPBUS_PREFIX="192.168.220."                     # Prefix for the IPBus IP addresses
IPB_MAC_PREFIX="08:00:32:00:ff:"                # Prefix for the IPBus MAC addresses



#################### MAKE DIRS ####################
for IP in "${RDOUT_IPS[@]}"
do
    ssh $REMOTE_USR@$RPI_PREFIX$IP mkdir $REMOTE_RDOUTDIR &> /dev/null
done

for IP in "${SYNC_IPS[@]}"
do
    ssh $REMOTE_USR@$RPI_PREFIX$IP mkdir $REMOTE_SYNCDIR &> /dev/null
done



#################### FILE COPY ####################
printf "\n"
# Transfer data
for IP in "${RDOUT_IPS[@]}"
do
    printf "Copying $RDOUTDIR to $RPI_PREFIX$IP:$REMOTE_RDOUTDIR\n"
    rsync $RSYNC_FLAGS $RDOUTDIR $REMOTE_USR@$RPI_PREFIX$IP:~/ >> /dev/null
    # If something goes wrong, let the user know and exit
    if [ $? -ne 0 ]
    then
        printf "rsync with %s failed - aborting.\n" "$IP"
        exit 1
    fi

    scp -r $COMMONDIR/* $REMOTE_USR@$RPI_PREFIX$IP:$REMOTE_RDOUTDIR >> /dev/null
    # If something goes wrong, let the user know and exit
    if [ $? -ne 0 ]
    then
        printf "scp with %s failed - aborting.\n" "$IP"
        exit 1
    fi
done

for IP in "${SYNC_IPS[@]}"
do
    printf "Copying $SYNCDIR to $RPI_PREFIX$IP:$REMOTE_SYNCDIR\n"
    rsync $RSYNC_FLAGS $SYNCDIR $REMOTE_USR@$RPI_PREFIX$IP:~/ >> /dev/null
    if [ $? -ne 0 ]
    then
        printf "rsync with %s failed - aborting\n" "$IP"
        exit 1
    fi

    scp -r $COMMONDIR/* $REMOTE_USR@$RPI_PREFIX$IP:$REMOTE_SYNCDIR >> /dev/null
    if [ $? -ne 0 ]
    then
        printf "scp with %s failed - aborting\n" "$IP"
        exit 1
    fi
done



#################### FW INSTALL, SW EXECUTION ####################
printf "\n"
for IP in "${SYNC_IPS[@]}"
do
    printf "SYNC at %s\n" "$RPI_PREFIX$IP"
    ssh $REMOTE_USR@$RPI_PREFIX$IP "cd $REMOTE_SYNCDIR; ./$REMOTE_SYNC_EXE $SYNC_ARGS"
    printf "\n"
done

for IP in "${RDOUT_IPS[@]}"
do
    MAC=$(echo "obase=16; $IP" | bc)
    printf "RDOUT at %s\n" "$RPI_PREFIX$IP"
    ssh $REMOTE_USR@$RPI_PREFIX$IP "cd $REMOTE_RDOUTDIR; ./$REMOTE_RDOUT_EXE $RDOUT_ARGS $IPBUS_PREFIX$IP $IPB_MAC_PREFIX$MAC"
    printf "\n"
done



## WAIT FOR PING ##
printf "Waiting for readout boards to appear\n"
for IP in "${RDOUT_IPS[@]}"
do
    ping -c 1 $IPBUS_PREFIX$IP >> /dev/null
    TMP=$?
    while [ $TMP -ne 0 ]
    do
        ping -c 1 $IPBUS_PREFIX$IP >> /dev/null
        TMP=$?
    done
    printf "\tRDOUT $IP appeared\n"
done



#################### DAQ ####################
printf "\nStarting DAQ\n"
cd $DAQDIR


# Check if the user has LD_LIBRARY_PATH and PATH set correctly. If not, it adds the relevant folders.
if [[ ":$LD_LIBRARY_PATH:" == *":/opt/cactus/lib:"* ]] || [[ ":$PATH:" == *":/opt/cactus/bin/:"* ]]
then
    # The path is properly set so we do nothing
    :
else
    # This is also found in daq/etc/env.sh
    export LD_LIBRARY_PATH=/opt/cactus/lib:$DAQDIR/lib:$LD_LIBRARY_PATH
    export PATH=/opt/cactus/bin:$PATH
fi


# Make the DAQ and check if make succeeded. If not, quit and inform the user.
make >> /dev/null
if [ $? -ne 0 ]
then
    printf "The DAQ failed to compile! Aborting run.\n"
    exit
fi


# Run the DAQ!
printf "\n"
$DAQEXE $DAQ_ARGS
cd $REPODIR



#################### END HELPERS ####################
printf "\nEnding helpers\n"
for IP in "${SYNC_IPS[@]}"
do
    ssh $REMOTE_USR@$RPI_PREFIX$IP "touch $ENDSYNC"
done

for IP in "${RDOUT_IPS[@]}"
do
    ssh $REMOTE_USR@$RPI_PREFIX$IP "touch $ENDRDOUT"
done



exit
